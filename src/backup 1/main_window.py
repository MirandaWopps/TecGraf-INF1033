import sys
from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QPushButton, QFileDialog, QLabel
)
from PySide6.QtGui import QFont
from PySide6.QtCore import Qt, QSize
import subprocess
import threading
import cv2  # Voc√™ precisa importar cv2 para grava√ß√£o

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üö¥‚Äç‚ôÇÔ∏è Bike Fit Analyzer üö¥‚Äç‚ôÄÔ∏è")
        self.setGeometry(500, 200, 400, 400)
        self.initUI()

    def initUI(self):
        layout = QVBoxLayout()

        title = QLabel("üö¥ Bike Fit Analyzer üö¥")
        title.setFont(QFont("Arial", 20, QFont.Bold))
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)

        # Bot√£o de selecionar v√≠deo
        btn_analyze = QPushButton("üìÇ Selecionar V√≠deo e Analisar")
        btn_analyze.setFixedHeight(60)
        btn_analyze.clicked.connect(self.select_video)
        layout.addWidget(btn_analyze)

        # Bot√£o de webcam
        self.button_cam = QPushButton("üé• Webcam")
        self.button_cam.setFixedHeight(60)
        self.button_cam.clicked.connect(self.toggle_recording)
        layout.addWidget(self.button_cam)

        # Bot√£o de estat√≠sticas
        btn_stats = QPushButton("üìä Estat√≠sticas")
        btn_stats.setFixedHeight(60)
        # btn_stats.clicked.connect(self.ver_estatisticas)
        layout.addWidget(btn_stats)

        # Bot√£o de sair
        btn_exit = QPushButton("‚ùå Sair")
        btn_exit.setFixedHeight(60)
        btn_exit.clicked.connect(self.close)
        layout.addWidget(btn_exit)

        self.setLayout(layout)

        self.recording = False
        self.capture_thread = None

    # Gets file of video.
    def select_video(self):
        file_dialog = QFileDialog()
        video_path, _ = file_dialog.getOpenFileName(self, "Selecione o v√≠deo", "", "Videos (*.mp4 *.avi *.mov *.mkv)")

        if video_path:
            print(f"Arquivo selecionado: {video_path}")
            subprocess.run(["python3", "videoAnalyse.py", video_path])  # Use python3 se necess√°rio

    # Webcam capture.
    def toggle_recording(self):
        if not self.recording:
            self.recording = True
            self.button_cam.setText("üõë Parar Grava√ß√£o")
            self.capture_thread = threading.Thread(target=self.record_video)
            self.capture_thread.start()
        else:
            self.recording = False
            self.button_cam.setText("üé• Iniciar Grava√ß√£o")

    def record_video(self):
        cap = cv2.VideoCapture(0)#Abre Webcam
#        cap = cv2.VideoCapture("../../videoplayback.mp4")#Mocking: aus√™ncia de webcam.
        if not cap.isOpened():
            print("Erro: Webcam n√£o encontrada ou n√£o pode ser aberta.")
            return  # Sai da fun√ß√£o para n√£o tentar gravar
        
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter('gravado.mp4', fourcc, 20.0, (640, 480))

        while self.recording and cap.isOpened():
            ret, frame = cap.read()
            if not ret:
                break
            out.write(frame)
            cv2.imshow('Gravando...', frame)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                self.recording = False
                break

        cap.release()
        out.release()
        cv2.destroyAllWindows()
        print("Grava√ß√£o finalizada. V√≠deo salvo como gravado.mp4")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())

===================================

